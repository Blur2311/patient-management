name: Deploy Microservices to AWS

on:
  push:
    branches:
      - main
  # ƒê·ªÅ xu·∫•t: Th√™m trigger cho Pull Request
    pull_request:
      branches:
       - main

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_PREFIX: patient-management # ƒê√¢y l√† t√™n repository chung

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_IAM_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Images
        id: build-images
        run: |
          services=("api-gateway" "appointment-service" "auth-service" "billing-service" "patient-service" "analytics-service")
          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=${{ github.sha }}
          
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          # Note: The EcrRepoUriPrefix for CDK will now be just the registry and prefix
          echo "ECR_REPO_URI_PREFIX=${REGISTRY}/${ECR_REPOSITORY_PREFIX}" >> $GITHUB_ENV
          
          for service in "${services[@]}"; do
            # Define the full repository name for this specific service
            REPO_NAME="${ECR_REPOSITORY_PREFIX}/${service}"
          
            echo "ü™£ Ensuring ECR repository '${REPO_NAME}' exists..."
            # Create a repository for EACH service. The '|| true' ignores the error if it already exists.
            aws ecr create-repository \
              --repository-name ${REPO_NAME} \
              --region ${{ env.AWS_REGION }} \
              --image-scanning-configuration scanOnPush=true || true
          
            echo "üöÄ Building and pushing image for ${service}..."
            FULL_IMAGE_NAME="${REGISTRY}/${REPO_NAME}:${IMAGE_TAG}"
          
            docker build -t ${FULL_IMAGE_NAME} ./${service}
            docker push ${FULL_IMAGE_NAME}
          done

      - name: Setup Node.js (for CDK CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build CDK for Java Project
        run: |
          cd infrastructure
          mvn package

      - name: Deploy CloudFormation Stack with CDK
        run: |
          cd infrastructure
          echo "üöÄ Deploying stack ${{ env.STACK_NAME }}..."
          cdk deploy "${{ env.STACK_NAME }}" \
            --app "mvn -e -q exec:java" \
            --require-approval never \
            --parameters EcrRepoUriPrefix=${{ env.ECR_REPO_URI_PREFIX }} \
            --parameters ImageTag=${{ env.IMAGE_TAG }}

      - name: Describe CloudFormation Stack Outputs
        run: |
          echo "üåê Fetching stack outputs..."
          aws cloudformation describe-stacks \
            --stack-name "${{ env.STACK_NAME }}" \
            --region "${{ env.AWS_REGION }}" \
            --query "Stacks[0].Outputs" \
            --output table